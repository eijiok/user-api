// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/eijiok/user-api/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// UserFactory is an autogenerated mock type for the UserFactory type
type UserFactory struct {
	mock.Mock
}

// GetController provides a mock function with given fields:
func (_m *UserFactory) GetController() interfaces.UserController {
	ret := _m.Called()

	var r0 interfaces.UserController
	if rf, ok := ret.Get(0).(func() interfaces.UserController); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.UserController)
		}
	}

	return r0
}

// GetRepository provides a mock function with given fields:
func (_m *UserFactory) GetRepository() interfaces.UserRepository {
	ret := _m.Called()

	var r0 interfaces.UserRepository
	if rf, ok := ret.Get(0).(func() interfaces.UserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.UserRepository)
		}
	}

	return r0
}

// GetRouter provides a mock function with given fields:
func (_m *UserFactory) GetRouter() interfaces.UserRouter {
	ret := _m.Called()

	var r0 interfaces.UserRouter
	if rf, ok := ret.Get(0).(func() interfaces.UserRouter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.UserRouter)
		}
	}

	return r0
}

// GetService provides a mock function with given fields:
func (_m *UserFactory) GetService() interfaces.UserService {
	ret := _m.Called()

	var r0 interfaces.UserService
	if rf, ok := ret.Get(0).(func() interfaces.UserService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.UserService)
		}
	}

	return r0
}

type mockConstructorTestingTNewUserFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserFactory creates a new instance of UserFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserFactory(t mockConstructorTestingTNewUserFactory) *UserFactory {
	mock := &UserFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
