// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/eijiok/user-api/dto"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserService) Delete(ctx context.Context, id *primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoesEmailNotExist provides a mock function with given fields: ctx
func (_m *UserService) DoesEmailNotExist(ctx context.Context) func(interface{}) bool {
	ret := _m.Called(ctx)

	var r0 func(interface{}) bool
	if rf, ok := ret.Get(0).(func(context.Context) func(interface{}) bool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(interface{}) bool)
		}
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, id
func (_m *UserService) GetById(ctx context.Context, id *primitive.ObjectID) (*dto.UserResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *dto.UserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.ObjectID) *dto.UserResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *UserService) List(ctx context.Context) ([]dto.UserResponse, error) {
	ret := _m.Called(ctx)

	var r0 []dto.UserResponse
	if rf, ok := ret.Get(0).(func(context.Context) []dto.UserResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, user
func (_m *UserService) Save(ctx context.Context, user *dto.UserRequest) (*dto.UserResponse, error) {
	ret := _m.Called(ctx, user)

	var r0 *dto.UserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserRequest) *dto.UserResponse); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.UserRequest) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, user
func (_m *UserService) Update(ctx context.Context, id *primitive.ObjectID, user *dto.UserRequest) error {
	ret := _m.Called(ctx, id, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.ObjectID, *dto.UserRequest) error); ok {
		r0 = rf(ctx, id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
